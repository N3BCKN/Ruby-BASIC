exit
$token
line
exit
QUIT
line
$token
exit
QUIT
$line_number
line_number
$buffer.keys.sort
current_index
return_line
target_line
$gosub_stack.push(return_line)
return_line = current_keys[current_index + 1]
current_index + 1 < current_keys.length
  current_keys = $buffer.keys.sort
line_text.chars
ine_text.chars
  target_line = eval_expr(line_text.chars).to_i
line_text.strip!
line_text = line.is_a?(Array) ? line.join : line.to_s
line
exit
QUIT
line
exit
QUIT
line
exit
QUIT
line
exit
line
exit
EXIT
QUIT
exit
EXIT
QUIT
line
LINE
exit
EXIT
QUIT
line[0]
exit
line
exit
  if line[0] =~ /\d/  # Numbers
    $token = number(line)
  elsif line[0] =~ /[A-Z]/  # Keywords and identifiers
    $token = get_identifier(line)
  elsif line[0] =~ /[+\-*\/\(\)=<>,;:\^]/  # Operators
    $token = line.shift
  elsif line[0] == '"'  # Strings
    $token = string(line)
  else
    puts "Unexpected character: #{line[0]}"
    $token = ''
    line.shift
  end
line[0] =~ /\d/ 
line[0] =~ /[+\-*\/\(\)=<>,;:\^]/ 
line[0] =~ /[+\-*\/\(\)=<>,;:\^]/line[0] =~ /[+\-*\/\(\)=<>,;:\^]/ 
line[0] =~ /[+\-*\/\(\)=<>,;:\^]/
line[0] =~ /[A-Z]/ 
line[0]
line
  line.shift while !line.empty? && line[0] == ' '
line
lin
